local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local PathfindingService = game:GetService("PathfindingService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

-- üîπ H√†m t√¨m cƒÉn c·ª© theo t√™n tr√™n bi·ªÉn "CƒÉn c·ª© c·ªßa ..."
local function getHomePart()
	for _, obj in ipairs(workspace:GetDescendants()) do
		if obj:IsA("TextLabel") then
			local text = string.lower(obj.Text)
			if string.find(text, string.lower(player.Name)) or string.find(text, string.lower(player.DisplayName)) then
				-- T√¨m Part g·∫Øn GUI
				local guiParent = obj:FindFirstAncestorWhichIsA("BillboardGui") or obj:FindFirstAncestorWhichIsA("SurfaceGui")
				if guiParent and guiParent.Adornee then
					return guiParent.Adornee -- ch√≠nh l√† Part treo c√°i b·∫£ng t√™n
				else
					-- n·∫øu kh√¥ng c√≥ Adornee, th·ª≠ l·∫•y cha c·ªßa GUI
					if guiParent and guiParent.Parent:IsA("Part") then
						return guiParent.Parent
					end
				end
			end
		end
	end
	return nil
end

-- üîπ T·∫°o GUI n√∫t b·∫•m
local gui = Instance.new("ScreenGui")
gui.Name = "HomeGui"
gui.ResetOnSpawn = false
gui.Parent = player:WaitForChild("PlayerGui")

local button = Instance.new("TextButton")
button.Size = UDim2.new(0, 160, 0, 50)
button.Position = UDim2.new(0, 20, 0, 200)
button.Text = "T·ª± bay v·ªÅ nh√†"
button.BackgroundColor3 = Color3.fromRGB(50, 200, 50)
button.Parent = gui

-- Tr·∫°ng th√°i
local autoFlying = false
local currentTween

-- üîπ Tween bay m∆∞·ª£t
local function tweenTo(targetPos)
	if not humanoidRootPart then return end
	if currentTween then currentTween:Cancel() end

	local distance = (targetPos - humanoidRootPart.Position).Magnitude
	local flyTime = distance / 60 -- t·ªëc ƒë·ªô bay
	local tweenInfo = TweenInfo.new(flyTime, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
	local goal = { CFrame = CFrame.new(targetPos) }
	currentTween = TweenService:Create(humanoidRootPart, tweenInfo, goal)
	currentTween:Play()
	return currentTween
end

-- üîπ Bay b·∫±ng Pathfinding (t·ª± t√¨m ƒë∆∞·ªùng tr√°nh v·∫≠t c·∫£n)
local function flyPath(homePart)
	if not humanoidRootPart or not homePart then return end

	local path = PathfindingService:CreatePath({
		AgentRadius = 5,
		AgentHeight = 6,
		AgentCanJump = true,
		AgentCanClimb = true
	})

	path:ComputeAsync(humanoidRootPart.Position, homePart.Position + Vector3.new(0,5,0))

	if path.Status == Enum.PathStatus.Complete then
		local waypoints = path:GetWaypoints()
		for _, waypoint in ipairs(waypoints) do
			if not autoFlying then break end
			local target = waypoint.Position + Vector3.new(0, 5, 0)
			local tween = tweenTo(target)
			tween.Completed:Wait()
		end
		if autoFlying then
			button.Text = "ƒê√£ v·ªÅ nh√†"
			autoFlying = false
		end
	else
		button.Text = "Kh√¥ng t√¨m th·∫•y ƒë∆∞·ªùng!"
		autoFlying = false
	end
end

-- üîπ B·∫≠t/t·∫Øt b·∫±ng n√∫t
button.MouseButton1Click:Connect(function()
	if autoFlying then
		if currentTween then currentTween:Cancel() end
		button.Text = "T·ª± bay v·ªÅ nh√†"
		button.BackgroundColor3 = Color3.fromRGB(50,200,50)
		autoFlying = false
	else
		local homePart = getHomePart()
		if not homePart then
			button.Text = "Kh√¥ng c√≥ nh√†!"
			return
		end
		button.Text = "ƒêang bay..."
		button.BackgroundColor3 = Color3.fromRGB(200,50,50)
		autoFlying = true
		flyPath(homePart)
	end
end)

-- üîπ N·∫øu nh√¢n v·∫≠t respawn
player.CharacterAdded:Connect(function(char)
	character = char
	humanoidRootPart = character:WaitForChild("HumanoidRootPart")
end)
